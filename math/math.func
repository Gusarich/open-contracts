{-
    math.func   

    Extends FunC's arithmetic operations.
-}

(int) math::pow(int n, int e) {
  if (e == 0) {
    return 1;
  }

  if (e == 1) {
    return n;
  }

  int p = math::pow(n, (e / 2));
  p = p * p;
    
  if ((e % 2) == 1) {
    p = p * n;
  }
    
  return p;
}

int math::sqrt(int x) inline {
  if (x == 0) { return x; }

  int r = 181;
  int xx = x;
  if (xx >= 0x100000000000000000000000000000000) {
    xx >>= 128;
    r <<= 64;
  }
  if (xx >= 0x10000000000000000) {
    xx >>= 64;
    r <<= 32;
  }
  if (xx >= 0x100000000) {
    xx >>= 32;
    r <<= 16;
  }
  if (xx >= 0x10000) {
    xx >>= 16;
    r <<= 8;
  }

  r = (r * (xx + 65536)) >> 18;

  repeat(7) {
    r = (r + x / r) >> 1;
  }

  int r1 = x / r;

  return (r < r1 ? r : r1);
}

(int) math::avg(int x, int y) inline {
  return (x + y) / 2;
}

(int) math::exp(int x) inline {
  return (x >= 0 ? 1 << x : 1 >> (x * -1));
}

(int) math::log2(int x) inline {
  int n = 0;
  if (x >= 128.math::exp()) { 
    x >>= 128; 
    n += 128; 
  }
  if (x >= 64.math::exp()) { 
    x >>= 64;
    n += 64; 
  }
  if (x >= 32.math::exp()) {
    x >>= 32; 
    n += 32; 
  }
  if (x >= 16.math::exp()) { 
    x >>= 16; 
    n += 16; 
  }
  if (x >= 8.math::exp()) { 
    x >>= 8; 
    n += 8; 
  }
  if (x >= 4.math::exp()) { 
    x >>= 4; 
    n += 4; 
  }
  if (x >= 2.math::exp()) { 
    x >>= 2; 
    n += 2; 
  }
  if (x >= 1.math::exp()) { 
    ;; x >>= 1; 
    n += 1; 
  }
  return n;
}

(int) math::mod (int x, int y) asm "MOD";
